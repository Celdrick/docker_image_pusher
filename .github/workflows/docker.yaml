name: Docker Image Sync
on:
  workflow_dispatch:
  push:
    branches: [ main ]
env:
  ALIYUN_REGISTRY: ${{ secrets.ALIYUN_REGISTRY }}
  ALIYUN_NAME_SPACE: ${{ secrets.ALIYUN_NAME_SPACE }}
  ALIYUN_USER: ${{ secrets.ALIYUN_REGISTRY_USER }}
  ALIYUN_PASS: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}
  PRIVATE_REGISTRY: ${{ secrets.MY_REGISTRY }}
  PRIVATE_USER: ${{ secrets.MY_REGISTRY_USER }}
  PRIVATE_PASS: ${{ secrets.MY_REGISTRY_PASSWORD }}
  MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
  MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
  MYSQL_DB: ${{ secrets.MYSQL_DB }}
  MYSQL_USER: ${{ secrets.MYSQL_USER }}
  MYSQL_PASS: ${{ secrets.MYSQL_PASSWORD }}

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - name: Configure Docker Insecure Registry
      run: |
        echo "{\"insecure-registries\": [\"${PRIVATE_REGISTRY}\"]}" | sudo tee /etc/docker/daemon.json
        sudo systemctl daemon-reload
        sudo systemctl restart docker

    - name: Maximize Build Space
      uses: easimon/maximize-build-space@v2
      with:
        root-reserve-mb: 2048
        swap-size-mb: 1024
        remove-dotnet: true
        remove-haskell: true
        build-mount-path: /var/lib/docker

    - name: Setup MySQL Client
      run: |
        sudo apt-get update
        sudo apt-get install -y mysql-client

    - name: Initialize Database
      run: |
        mysql --host=${MYSQL_HOST} --port=${MYSQL_PORT} \
          --user=${MYSQL_USER} --password=${MYSQL_PASS} <<EOF
        CREATE DATABASE IF NOT EXISTS ${MYSQL_DB};
        USE ${MYSQL_DB};
        CREATE TABLE IF NOT EXISTS push_history (
          id INT AUTO_INCREMENT PRIMARY KEY,
          registry_url VARCHAR(255) NOT NULL,
          image_name VARCHAR(255) NOT NULL,
          registry_image_name VARCHAR(255) NOT NULL,
          digest VARCHAR(71) NOT NULL,
          push_time DATETIME DEFAULT CURRENT_TIMESTAMP,
          push_status ENUM('pending','success','failed') DEFAULT 'pending',
          image_size BIGINT UNSIGNED,
          architecture VARCHAR(50),
          push_duration INT,
          UNIQUE INDEX idx_unique_image (registry_image_name, digest)
        );
        EOF

    - name: Login to Registries
      run: |
        docker login -u ${ALIYUN_USER} -p ${ALIYUN_PASS} ${ALIYUN_REGISTRY}
        docker login -u ${PRIVATE_USER} -p ${PRIVATE_PASS} ${PRIVATE_REGISTRY}

    - name: Process Aliyun Images
      run: |
        while IFS= read -r line || [ -n "$line" ]; do
          [[ -z "$line" || "$line" =~ ^\s*# ]] && continue
          
          image=$(echo "$line" | awk '{print $NF}' | cut -d@ -f1)
          platform=$(echo "$line" | awk -F'--platform[ =]' '{print $2}' | awk '{print $1}')
          name_space=$(echo "$image" | awk -F'/' '{if(NF==3)print $2; else if(NF==2)print $1}')
          image_name=$(echo "$image" | awk -F'/' '{print $NF}' | awk -F':' '{print $1}')
          tag=$(echo "$image" | awk -F':' '{print $2}')
          
          platform_prefix="${platform//\//_}_"
          name_space_prefix="${name_space:+${name_space}_}"
          target_image="${ALIYUN_REGISTRY}/${ALIYUN_NAME_SPACE}/${platform_prefix}${name_space_prefix}${image_name}:${tag}"
          
          # 修复关键点：使用转义括号和引号
          digest_cmd=$(docker inspect --format='{{.RepoDigests}}' "$image" 2>/dev/null | awk '{print $1}' | cut -d@ -f2)
          exists=$(mysql --host="$MYSQL_HOST" --port="$MYSQL_PORT" \
            --user="$MYSQL_USER" --password="$MYSQL_PASS" "$MYSQL_DB" \
            -N -s -e "SELECT COUNT(*) FROM push_history 
            WHERE registry_image_name = '$target_image' 
            AND digest = '$digest_cmd'")
          
          if [ "$exists" -gt 0 ]; then
            echo "镜像已存在，跳过: $target_image"
            continue
          fi
          
          start_time=$(date +%s)
          digest=$(docker inspect --format='{{.RepoDigests}}' "$image" | awk '{print $1}' | cut -d@ -f2)
          
          # 修复INSERT语句的引号问题
          mysql --host="$MYSQL_HOST" --port="$MYSQL_PORT" \
            --user="$MYSQL_USER" --password="$MYSQL_PASS" "$MYSQL_DB" <<-EOF
            INSERT INTO push_history 
            (registry_url, image_name, registry_image_name, digest, architecture) 
            VALUES 
            ('$ALIYUN_REGISTRY', '$image_name:$tag', '$target_image', '$digest', '$platform');
          EOF
          
          if docker pull "$line" && \
             docker tag "$image" "$target_image" && \
             docker push "$target_image" 2>&1 | tee push.log; then
             
            duration=$(( $(date +%s) - start_time ))
            digest=$(grep "digest" push.log | awk '{print $NF}')
            size=$(docker inspect --format='{{.Size}}' "$image")
            
            mysql --host="$MYSQL_HOST" --port="$MYSQL_PORT" \
              --user="$MYSQL_USER" --password="$MYSQL_PASS" "$MYSQL_DB" <<-EOF
              UPDATE push_history 
              SET push_status = 'success',
                  image_size = $size,
                  push_duration = $duration,
                  digest = '$digest'
              WHERE registry_image_name = '$target_image';
            EOF
          else
            mysql --host="$MYSQL_HOST" --port="$MYSQL_PORT" \
              --user="$MYSQL_USER" --password="$MYSQL_PASS" "$MYSQL_DB" <<-EOF
              UPDATE push_history 
              SET push_status = 'failed' 
              WHERE registry_image_name = '$target_image';
            EOF
            exit 1
          fi
          
          docker rmi "$image" "$target_image" || true
        done < images.txt

    - name: Process Private Registry Images
      run: |
        while IFS= read -r line || [ -n "$line" ]; do
          [[ -z "$line" || "$line" =~ ^\s*# ]] && continue
          
          image=$(echo "$line" | awk '{print $NF}' | cut -d@ -f1)
          platform=$(echo "$line" | awk -F'--platform[ =]' '{print $2}' | awk '{print $1}')
          name_space=$(echo "$image" | awk -F'/' '{if(NF==3)print $2; else if(NF==2)print $1}')
          image_name=$(echo "$image" | awk -F'/' '{print $NF}' | awk -F':' '{print $1}')
          tag=$(echo "$image" | awk -F':' '{print $2}')
          
          platform_prefix="${platform//\//_}_"
          name_space_prefix="${name_space:+${name_space}_}"
          target_image="${PRIVATE_REGISTRY}/${platform_prefix}${name_space_prefix}${image_name}:${tag}"
          
          exists=$(mysql --host=${MYSQL_HOST} --port=${MYSQL_PORT} \
            --user=${MYSQL_USER} --password=${MYSQL_PASS} ${MYSQL_DB} \
            -N -s -e "SELECT COUNT(*) FROM push_history 
            WHERE registry_image_name='${target_image}' 
            AND digest=(docker inspect --format='{{.RepoDigests}}' ${image} | awk '{print \$1}')")
          
          if [ "$exists" -gt 0 ]; then
            echo "镜像已存在，跳过: ${target_image}"
            continue
          fi
          
          start_time=$(date +%s)
          digest=$(docker inspect --format='{{.RepoDigests}}' ${image} | awk '{print $1}' | cut -d@ -f2)
          
          mysql --host=${MYSQL_HOST} --port=${MYSQL_PORT} \
            --user=${MYSQL_USER} --password=${MYSQL_PASS} ${MYSQL_DB} <<-EOF
            INSERT INTO push_history 
            (registry_url, image_name, registry_image_name, digest, architecture) 
            VALUES 
            ('${PRIVATE_REGISTRY}', '${image_name}:${tag}', '${target_image}', '${digest}', '${platform}');
          EOF
          
          if docker pull $line && \
             docker tag ${image} ${target_image} && \
             docker push ${target_image} 2>&1 | tee push.log; then
             
            duration=$(( $(date +%s) - start_time ))
            digest=$(grep "digest" push.log | awk '{print $NF}')
            size=$(docker inspect --format='{{.Size}}' ${image})
            
            mysql --host=${MYSQL_HOST} --port=${MYSQL_PORT} \
              --user=${MYSQL_USER} --password=${MYSQL_PASS} ${MYSQL_DB} <<-EOF
              UPDATE push_history 
              SET push_status='success',
                  image_size=${size},
                  push_duration=${duration},
                  digest='${digest}'
              WHERE registry_image_name='${target_image}';
            EOF
          else
            mysql --host=${MYSQL_HOST} --port=${MYSQL_PORT} \
              --user=${MYSQL_USER} --password=${MYSQL_PASS} ${MYSQL_DB} <<-EOF
              UPDATE push_history 
              SET push_status='failed' 
              WHERE registry_image_name='${target_image}';
            EOF
            exit 1
          fi
          
          docker rmi ${image} ${target_image} || true
        done < images.txt
