name: Docker
on:
  workflow_dispatch:
  push:
    branches: [ main ]
env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"
  PRIVATE_REGISTRY: "${{ secrets.PRIVATE_REGISTRY }}"  # 新增私有仓库地址
  PRIVATE_REGISTRY_USER: "${{ secrets.PRIVATE_REGISTRY_USER }}"
  PRIVATE_REGISTRY_PASSWORD: "${{ secrets.PRIVATE_REGISTRY_PASSWORD }}"

jobs:
  build:
    name: Pull and Push
    runs-on: ubuntu-latest
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart Docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to registries
      run: |
        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY
        docker login -u $PRIVATE_REGISTRY_USER -p $PRIVATE_REGISTRY_PASSWORD $PRIVATE_REGISTRY

    - name: Build and push images
      run: |
        declare -A duplicate_images
        declare -A temp_map

        # 第一步：预处理镜像名称，检测重复
        while IFS= read -r line || [ -n "$line" ]; do
          [[ -z "$line" ]] && continue
          if echo "$line" | grep -q '^\s*#'; then
            continue
          fi

          image=$(echo "$line" | awk '{print $NF}' | cut -d@ -f1)
          image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
          name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
          name_space="${name_space//_/-}"  # 替换命名空间中的下划线为连字符
          image_name=$(echo "$image_name_tag" | awk -F: '{print $1}')

          if [[ -n "${temp_map[$image_name]}" ]]; then
            if [[ "${temp_map[$image_name]}" != "$name_space" ]]; then
              duplicate_images[$image_name]="true"
            fi
          else
            temp_map[$image_name]="$name_space"
          fi
        done < images.txt

        # 第二步：处理镜像并推送
        while IFS= read -r line || [ -n "$line" ]; do
          [[ -z "$line" ]] && continue
          if echo "$line" | grep -q '^\s*#'; then
            continue
          fi

          echo "Processing image: $line"
          docker pull $line
          platform=$(echo "$line" | awk -F'--platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')
          platform_prefix=""
          if [ -n "$platform" ]; then
            platform_prefix="${platform//\//_}_"
          fi

          image=$(echo "$line" | awk '{print $NF}' | cut -d@ -f1)
          image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
          # 处理默认tag
          if [[ "$image_name_tag" != *":"* ]]; then
            image_name_tag="${image_name_tag}:latest"
          fi

          name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
          name_space_prefix=""
          if [[ -n "${duplicate_images[$image_name]}" ]]; then
            if [[ -n "$name_space" ]]; then
              name_space_prefix="${name_space//_/-}_"
            fi
          fi

          # 生成镜像名称
          aliyun_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$platform_prefix$name_space_prefix$image_name_tag"
          private_image="$PRIVATE_REGISTRY/$ALIYYUN_NAME_SPACE/$platform_prefix$name_space_prefix$image_name_tag"  # 注意这里ALIYUN_NAME_SPACE应为ALIYUN_NAME_SPACE，可能是笔误

          # 推送逻辑
          docker tag $image $aliyun_image
          docker push $aliyun_image || echo "阿里云推送失败，继续执行"
          docker tag $image $private_image
          docker push $private_image || echo "私有仓库推送失败，继续执行"

          # 清理
          docker rmi $image || true
          docker rmi $aliyun_image || true
          docker rmi $private_image || true
        done < images.txt
