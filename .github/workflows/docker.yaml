name: Docker
on:
  workflow_dispatch:
  push:
    branches: [ main ]
env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"
  MY_REGISTRY: "${{ secrets.MY_REGISTRY }}"
  MY_REGISTRY_USER: "${{ secrets.MY_REGISTRY_USER }}"
  MY_REGISTRY_PASSWORD: "${{ secrets.MY_REGISTRY_PASSWORD }}"
  MYSQL_HOST: "10.0.0.130"
  MYSQL_PORT: "3306"
  MYSQL_DB: "${{ secrets.MYSQL_DB }}"
  MYSQL_USER: "${{ secrets.MYSQL_USER }}"
  MYSQL_PASSWORD: "${{ secrets.MYSQL_PASSWORD }}"
  SSH_HOST: "${{ secrets.SSH_HOST }}"
  SSH_USER: "${{ secrets.SSH_USER }}"
  SSH_PRIVATE_KEY: "${{ secrets.SSH_PRIVATE_KEY }}"
  SSH_PASSPHRASE: "${{ secrets.SSH_PASSPHRASE }}"

jobs:
  build:
    name: Pull and Push
    runs-on: ubuntu-latest
    steps:
    - name: Configure Docker insecure registry
      run: |
        echo '{"insecure-registries": ["${{ env.MY_REGISTRY }}"]}' | sudo tee /etc/docker/daemon.json
        sudo systemctl daemon-reload
        sudo systemctl restart docker

    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Setup SSH Tunnel
      id: ssh_tunnel
      run: |
        # 创建SSH目录并设置权限
        mkdir -p ~/.ssh
        echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        # 使用sshpass处理带密码的私钥（需提前安装）
        sudo apt-get install -y sshpass

        # 建立SSH隧道（添加详细日志）
        sshpass -p "${SSH_PASSPHRASE}" ssh -f -N \
          -L 3307:${MYSQL_HOST}:${MYSQL_PORT} \
          -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          -o IdentitiesOnly=yes \
          ${SSH_USER}@${SSH_HOST} -p 22

    - name: Install MySQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y mysql-client sshpass

    - name: Initialize database
      run: |
        mysql --host=127.0.0.1 --port=3307 \
          --user=${MYSQL_USER} --password=${MYSQL_PASSWORD} <<EOF
        CREATE DATABASE IF NOT EXISTS ${MYSQL_DB};
        USE ${MYSQL_DB};
        CREATE TABLE IF NOT EXISTS push_history (
          id INT AUTO_INCREMENT PRIMARY KEY,
          registry_url VARCHAR(255) NOT NULL,
          registry_image_name VARCHAR(255) NOT NULL,
          image_name VARCHAR(255) NOT NULL,
          push_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        EOF

    - name: Login to Aliyun
      run: docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY

    - name: Login to Private Registry
      run: docker login -u $MY_REGISTRY_USER -p $MY_REGISTRY_PASSWORD $MY_REGISTRY

    - name: Process images for Aliyun
      run: |
        while IFS= read -r line || [ -n "$line" ]; do
          [[ -z "$line" || "$line" =~ ^\s*# ]] && continue
          image=$(echo "$line" | awk '{print $NF}' | cut -d@ -f1)
          image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
          platform=$(echo "$line" | awk -F'--platform[ =]' '{print $2}' | awk '{print $1}')
          platform_prefix="${platform//\//_}_"
          name_space=$(echo "$image" | awk -F'/' '{if(NF==3)print $2; else if(NF==2)print $1}')
          name_space_prefix="${name_space:+${name_space}_}"
          new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${platform_prefix}${name_space_prefix}${image_name_tag}"
          
          # 检查数据库记录
          exists=$(mysql --host=127.0.0.1 --port=3307 \
            --user=${MYSQL_USER} --password=${MYSQL_PASSWORD} \
            --batch --skip-column-names \
            -e "USE ${MYSQL_DB}; SELECT COUNT(*) FROM push_history 
                WHERE registry_url='${ALIYUN_REGISTRY}' 
                AND registry_image_name='${new_image}';")
          
          if [ "$exists" -gt 0 ]; then
            echo "Skipping existing: $new_image"
            continue
          fi

          docker pull $line
          docker tag $image $new_image
          docker push $new_image
          
          # 插入数据库记录
          mysql --host=127.0.0.1 --port=3307 \
            --user=${MYSQL_USER} --password=${MYSQL_PASSWORD} \
            -e "USE ${MYSQL_DB}; INSERT INTO push_history 
            (registry_url, registry_image_name, image_name) 
            VALUES ('${ALIYUN_REGISTRY}', '${new_image}', '${image_name_tag}');"
            
          docker rmi $image $new_image || true
        done < images.txt

    - name: Process images for Private Registry
      run: |
        while IFS= read -r line || [ -n "$line" ]; do
          [[ -z "$line" || "$line" =~ ^\s*# ]] && continue
          image=$(echo "$line" | awk '{print $NF}' | cut -d@ -f1)
          image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
          platform=$(echo "$line" | awk -F'--platform[ =]' '{print $2}' | awk '{print $1}')
          platform_prefix="${platform//\//_}_"
          name_space=$(echo "$image" | awk -F'/' '{if(NF==3)print $2; else if(NF==2)print $1}')
          name_space_prefix="${name_space:+${name_space}_}"
          new_image="$MY_REGISTRY/${platform_prefix}${name_space_prefix}${image_name_tag}"
          
          # 检查数据库记录
          exists=$(mysql --host=127.0.0.1 --port=3307 \
            --user=${MYSQL_USER} --password=${MYSQL_PASSWORD} \
            --batch --skip-column-names \
            -e "USE ${MYSQL_DB}; SELECT COUNT(*) FROM push_history 
                WHERE registry_url='${MY_REGISTRY}' 
                AND registry_image_name='${new_image}';")
          
          if [ "$exists" -gt 0 ]; then
            echo "Skipping existing: $new_image"
            continue
          fi

          docker pull $line
          docker tag $image $new_image
          docker push $new_image
          
          # 插入数据库记录
          mysql --host=127.0.0.1 --port=3307 \
            --user=${MYSQL_USER} --password=${MYSQL_PASSWORD} \
            -e "USE ${MYSQL_DB}; INSERT INTO push_history 
            (registry_url, registry_image_name, image_name) 
            VALUES ('${MY_REGISTRY}', '${new_image}', '${image_name_tag}');"
            
          docker rmi $image $new_image || true
        done < images.txt

    - name: Close SSH Tunnel
      if: always()
      run: |
        pgrep ssh | xargs -r kill
        rm -rf ~/.ssh
