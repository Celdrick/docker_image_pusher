name: Docker
on:
  workflow_dispatch:
  push:
    branches: [ main ]
env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"
  MY_REGISTRY: "${{ secrets.MY_REGISTRY }}"
  MY_REGISTRY_USER: "${{ secrets.MY_REGISTRY_USER }}"
  MY_REGISTRY_PASSWORD: "${{ secrets.MY_REGISTRY_PASSWORD }}"
  MYSQL_HOST: "${{ secrets.MYSQL_HOST }}"
  MYSQL_PORT: "${{ secrets.MYSQL_PORT }}"
  MYSQL_DB: "${{ secrets.MYSQL_DB }}"
  MYSQL_USER: "${{ secrets.MYSQL_USER }}"
  MYSQL_PASSWORD: "${{ secrets.MYSQL_PASSWORD }}"
jobs:
  build:
    name: Pull and Push
    runs-on: ubuntu-latest
    steps:
    - name: Install MySQL Client
      run: sudo apt-get update && sudo apt-get install -y mysql-client

    - name: Configure Docker insecure registry
      run: |
        echo '{"insecure-registries": ["${{ env.MY_REGISTRY }}"]}' | sudo tee /etc/docker/daemon.json
        sudo systemctl daemon-reload
        sudo systemctl restart docker

    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Create MySQL Schema
      run: |
        mysql -h $MYSQL_HOST -P $MYSQL_PORT -u $MYSQL_USER -p$MYSQL_PASSWORD -e "CREATE DATABASE IF NOT EXISTS $MYSQL_DB;"
        mysql -h $MYSQL_HOST -P $MYSQL_PORT -u $MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DB -e "
          CREATE TABLE IF NOT EXISTS push_history (
            id INT AUTO_INCREMENT PRIMARY KEY,
            registry_url VARCHAR(255) NOT NULL,
            image_name VARCHAR(255) NOT NULL,
            push_time DATETIME DEFAULT CURRENT_TIMESTAMP,
            registry_image_name VARCHAR(255) NOT NULL UNIQUE,
            push_status VARCHAR(50) NOT NULL,
            image_size BIGINT DEFAULT 0,
            digest VARCHAR(255),
            INDEX idx_registry_image (registry_image_name)
          );
        "

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    # 阿里云推送步骤
    - name: Process images for Aliyun
      run: |
        while IFS= read -r line || [ -n "$line" ]; do
          [[ -z "$line" || "$line" =~ ^\s*# ]] && continue
          image=$(echo "$line" | awk '{print $NF}' | cut -d@ -f1)
          image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
          platform=$(echo "$line" | awk -F'--platform[ =]' '{print $2}' | awk '{print $1}')
          platform_prefix="${platform//\//_}_"
          name_space=$(echo "$image" | awk -F'/' '{if(NF==3)print $2; else if(NF==2)print $1}')
          name_space_prefix="${name_space:+${name_space}_}"
          new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${platform_prefix}${name_space_prefix}${image_name_tag}"
          registry_image_name="${platform_prefix}${name_space_prefix}${image_name_tag}"
          
          # 检查是否已存在
          exists=$(mysql -h $MYSQL_HOST -P $MYSQL_PORT -u $MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DB -N -e "SELECT COUNT(*) FROM push_history WHERE registry_image_name='$registry_image_name';")
          if [ "$exists" -eq 1 ]; then
            echo "Skipping existing: $registry_image_name"
            continue
          fi

          docker pull $line
          docker tag $image $new_image
          push_status="success"
          image_size=$(docker inspect --format='{{.Size}}' $image)
          digest=$(docker inspect --format='{{index .RepoDigests 0}}' $new_image 2>/dev/null || echo 'N/A')

          if docker push $new_image; then
            push_status="success"
          else
            push_status="failed"
          fi

          # 记录到数据库
          mysql -h $MYSQL_HOST -P $MYSQL_PORT -u $MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DB -e "
            INSERT INTO push_history (registry_url, image_name, push_status, registry_image_name, image_size, digest)
            VALUES ('$ALIYUN_REGISTRY', '$image_name_tag', '$push_status', '$registry_image_name', $image_size, '$digest');
          "

          docker rmi $image $new_image || true
        done < images.txt

    # 私有仓库推送步骤
    - name: Process images for Private Registry
      run: |
        while IFS= read -r line || [ -n "$line" ]; do
          [[ -z "$line" || "$line" =~ ^\s*# ]] && continue
          image=$(echo "$line" | awk '{print $NF}' | cut -d@ -f1)
          image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
          platform=$(echo "$line" | awk -F'--platform[ =]' '{print $2}' | awk '{print $1}')
          platform_prefix="${platform//\//_}_"
          name_space=$(echo "$image" | awk -F'/' '{if(NF==3)print $2; else if(NF==2)print $1}')
          name_space_prefix="${name_space:+${name_space}_}"
          new_image="$MY_REGISTRY/${platform_prefix}${name_space_prefix}${image_name_tag}"
          registry_image_name="${platform_prefix}${name_space_prefix}${image_name_tag}"
          
          # 检查是否已存在
          exists=$(mysql -h $MYSQL_HOST -P $MYSQL_PORT -u $MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DB -N -e "SELECT COUNT(*) FROM push_history WHERE registry_image_name='$registry_image_name';")
          if [ "$exists" -eq 1 ]; then
            echo "Skipping existing: $registry_image_name"
            continue
          fi

          docker pull $line
          docker tag $image $new_image
          push_status="success"
          image_size=$(docker inspect --format='{{.Size}}' $image)
          digest=$(docker inspect --format='{{index .RepoDigests 0}}' $new_image 2>/dev/null || echo 'N/A')

          if docker push $new_image; then
            push_status="success"
          else
            push_status="failed"
          fi

          # 记录到数据库
          mysql -h $MYSQL_HOST -P $MYSQL_PORT -u $MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DB -e "
            INSERT INTO push_history (registry_url, image_name, push_status, registry_image_name, image_size, digest)
            VALUES ('$MY_REGISTRY', '$image_name_tag', '$push_status', '$registry_image_name', $image_size, '$digest');
          "

          docker rmi $image $new_image || true
        done < images.txt
